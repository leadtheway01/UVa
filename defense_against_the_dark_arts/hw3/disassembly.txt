1) When the operating system first causes the program to execute, what function will execute first?
080483f0 <_start>:
 80483f0:       31 ed                   xor    %ebp,%ebp
 80483f2:       5e                      pop    %esi
 80483f3:       89 e1                   mov    %esp,%ecx
 80483f5:       83 e4 f0                and    $0xfffffff0,%esp
 80483f8:       50                      push   %eax
 80483f9:       54                      push   %esp
 80483fa:       52                      push   %edx
 80483fb:       68 50 86 04 08          push   $0x8048650
 8048400:       68 f0 85 04 08          push   $0x80485f0
 8048405:       51                      push   %ecx
 8048406:       56                      push   %esi
 8048407:       68 eb 84 04 08          push   $0x80484eb
 804840c:       e8 af ff ff ff          call   80483c0 <__libc_start_main@plt>
 8048411:       f4                      hlt
 8048412:       66 90                   xchg   %ax,%ax
 8048414:       66 90                   xchg   %ax,%ax
 8048416:       66 90                   xchg   %ax,%ax
 8048418:       66 90                   xchg   %ax,%ax`
 804841a:       66 90                   xchg   %ax,%ax
 804841c:       66 90                   xchg   %ax,%ax
 804841e:       66 90                   xchg   %ax,%ax

start is called first when program runs

2) Do you see any "cavities" in the code that a virus might be able to use to insert code into the binary? where is it?
080483d0 <__isoc99_scanf@plt>:
 80483d0:       ff 25 1c a0 04 08       jmp    *0x804a01c
 80483d6:       68 20 00 00 00          push   $0x20
 80483db:       e9 a0 ff ff ff          jmp    8048380 <_init+0x2c>

Cavity virus searches for space that is filled with zeros or ASCII blanks.
Above function has a command push $0x20, which is ASCII blank or space.

08048390 <printf@plt>:
 8048390:       ff 25 0c a0 04 08       jmp    *0x804a00c
 8048396:       68 00 00 00 00          push   $0x0
 804839b:       e9 e0 ff ff ff          jmp    8048380 <_init+0x2c>

Above function has a command push $0x0, which is zero.

3) Explain why there is an "add $0x10,%esp" after the call to VolumeAndDensity. In particular, explain why add the value 0X10?
 8048544:       53                      push   %ebx
 8048545:       51                      push   %ecx
 8048546:       52                      push   %edx
 8048547:       50                      push   %eax
 8048548:       e8 75 00 00 00          call   80485c2 <VolumeAndDensity>
 804854d:       83 c4 10                add    $0x10,%esp

As shown above, parameters are pushed into the stack before the function VolumeAndDensity was called.
Thus, need to deallocate that memory after VolumeAndDensity function is returned.
16 bytes were pushed into the stack for parameters, thus deallocate 16 bytes.

================== objdump starts here =========================


./a.out:     file format elf32-i386


Disassembly of section .init:

08048354 <_init>:
 8048354:	53                   	push   %ebx
 8048355:	83 ec 08             	sub    $0x8,%esp
 8048358:	e8 c3 00 00 00       	call   8048420 <__x86.get_pc_thunk.bx>
 804835d:	81 c3 a3 1c 00 00    	add    $0x1ca3,%ebx
 8048363:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8048369:	85 c0                	test   %eax,%eax
 804836b:	74 05                	je     8048372 <_init+0x1e>
 804836d:	e8 6e 00 00 00       	call   80483e0 <__isoc99_scanf@plt+0x10>
 8048372:	83 c4 08             	add    $0x8,%esp
 8048375:	5b                   	pop    %ebx
 8048376:	c3                   	ret    

Disassembly of section .plt:

08048380 <printf@plt-0x10>:
 8048380:	ff 35 04 a0 04 08    	pushl  0x804a004
 8048386:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804838c:	00 00                	add    %al,(%eax)
	...

08048390 <printf@plt>:
 8048390:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 8048396:	68 00 00 00 00       	push   $0x0
 804839b:	e9 e0 ff ff ff       	jmp    8048380 <_init+0x2c>

080483a0 <__stack_chk_fail@plt>:
 80483a0:	ff 25 10 a0 04 08    	jmp    *0x804a010
 80483a6:	68 08 00 00 00       	push   $0x8
 80483ab:	e9 d0 ff ff ff       	jmp    8048380 <_init+0x2c>

080483b0 <puts@plt>:
 80483b0:	ff 25 14 a0 04 08    	jmp    *0x804a014
 80483b6:	68 10 00 00 00       	push   $0x10
 80483bb:	e9 c0 ff ff ff       	jmp    8048380 <_init+0x2c>

080483c0 <__libc_start_main@plt>:
 80483c0:	ff 25 18 a0 04 08    	jmp    *0x804a018
 80483c6:	68 18 00 00 00       	push   $0x18
 80483cb:	e9 b0 ff ff ff       	jmp    8048380 <_init+0x2c>

080483d0 <__isoc99_scanf@plt>:
 80483d0:	ff 25 1c a0 04 08    	jmp    *0x804a01c
 80483d6:	68 20 00 00 00       	push   $0x20
 80483db:	e9 a0 ff ff ff       	jmp    8048380 <_init+0x2c>

Disassembly of section .plt.got:

080483e0 <.plt.got>:
 80483e0:	ff 25 fc 9f 04 08    	jmp    *0x8049ffc
 80483e6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

080483f0 <_start>:
 80483f0:	31 ed                	xor    %ebp,%ebp
 80483f2:	5e                   	pop    %esi
 80483f3:	89 e1                	mov    %esp,%ecx
 80483f5:	83 e4 f0             	and    $0xfffffff0,%esp
 80483f8:	50                   	push   %eax
 80483f9:	54                   	push   %esp
 80483fa:	52                   	push   %edx
 80483fb:	68 50 86 04 08       	push   $0x8048650
 8048400:	68 f0 85 04 08       	push   $0x80485f0
 8048405:	51                   	push   %ecx
 8048406:	56                   	push   %esi
 8048407:	68 eb 84 04 08       	push   $0x80484eb
 804840c:	e8 af ff ff ff       	call   80483c0 <__libc_start_main@plt>
 8048411:	f4                   	hlt    
 8048412:	66 90                	xchg   %ax,%ax
 8048414:	66 90                	xchg   %ax,%ax
 8048416:	66 90                	xchg   %ax,%ax
 8048418:	66 90                	xchg   %ax,%ax`
 804841a:	66 90                	xchg   %ax,%ax
 804841c:	66 90                	xchg   %ax,%ax
 804841e:	66 90                	xchg   %ax,%ax

08048420 <__x86.get_pc_thunk.bx>:
 8048420:	8b 1c 24             	mov    (%esp),%ebx
 8048423:	c3                   	ret    
 8048424:	66 90                	xchg   %ax,%ax
 8048426:	66 90                	xchg   %ax,%ax
 8048428:	66 90                	xchg   %ax,%ax
 804842a:	66 90                	xchg   %ax,%ax
 804842c:	66 90                	xchg   %ax,%ax
 804842e:	66 90                	xchg   %ax,%ax

08048430 <deregister_tm_clones>:
 8048430:	b8 2b a0 04 08       	mov    $0x804a02b,%eax
 8048435:	2d 28 a0 04 08       	sub    $0x804a028,%eax
 804843a:	83 f8 06             	cmp    $0x6,%eax
 804843d:	76 1a                	jbe    8048459 <deregister_tm_clones+0x29>
 804843f:	b8 00 00 00 00       	mov    $0x0,%eax
 8048444:	85 c0                	test   %eax,%eax
 8048446:	74 11                	je     8048459 <deregister_tm_clones+0x29>
 8048448:	55                   	push   %ebp
 8048449:	89 e5                	mov    %esp,%ebp
 804844b:	83 ec 14             	sub    $0x14,%esp
 804844e:	68 28 a0 04 08       	push   $0x804a028
 8048453:	ff d0                	call   *%eax
 8048455:	83 c4 10             	add    $0x10,%esp
 8048458:	c9                   	leave  
 8048459:	f3 c3                	repz ret 
 804845b:	90                   	nop
 804845c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

08048460 <register_tm_clones>:
 8048460:	b8 28 a0 04 08       	mov    $0x804a028,%eax
 8048465:	2d 28 a0 04 08       	sub    $0x804a028,%eax
 804846a:	c1 f8 02             	sar    $0x2,%eax
 804846d:	89 c2                	mov    %eax,%edx
 804846f:	c1 ea 1f             	shr    $0x1f,%edx
 8048472:	01 d0                	add    %edx,%eax
 8048474:	d1 f8                	sar    %eax
 8048476:	74 1b                	je     8048493 <register_tm_clones+0x33>
 8048478:	ba 00 00 00 00       	mov    $0x0,%edx
 804847d:	85 d2                	test   %edx,%edx
 804847f:	74 12                	je     8048493 <register_tm_clones+0x33>
 8048481:	55                   	push   %ebp
 8048482:	89 e5                	mov    %esp,%ebp
 8048484:	83 ec 10             	sub    $0x10,%esp
 8048487:	50                   	push   %eax
 8048488:	68 28 a0 04 08       	push   $0x804a028
 804848d:	ff d2                	call   *%edx
 804848f:	83 c4 10             	add    $0x10,%esp
 8048492:	c9                   	leave  
 8048493:	f3 c3                	repz ret 
 8048495:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8048499:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080484a0 <__do_global_dtors_aux>:
 80484a0:	80 3d 28 a0 04 08 00 	cmpb   $0x0,0x804a028
 80484a7:	75 13                	jne    80484bc <__do_global_dtors_aux+0x1c>
 80484a9:	55                   	push   %ebp
 80484aa:	89 e5                	mov    %esp,%ebp
 80484ac:	83 ec 08             	sub    $0x8,%esp
 80484af:	e8 7c ff ff ff       	call   8048430 <deregister_tm_clones>
 80484b4:	c6 05 28 a0 04 08 01 	movb   $0x1,0x804a028
 80484bb:	c9                   	leave  
 80484bc:	f3 c3                	repz ret 
 80484be:	66 90                	xchg   %ax,%ax

080484c0 <frame_dummy>:
 80484c0:	b8 10 9f 04 08       	mov    $0x8049f10,%eax
 80484c5:	8b 10                	mov    (%eax),%edx
 80484c7:	85 d2                	test   %edx,%edx
 80484c9:	75 05                	jne    80484d0 <frame_dummy+0x10>
 80484cb:	eb 93                	jmp    8048460 <register_tm_clones>
 80484cd:	8d 76 00             	lea    0x0(%esi),%esi
 80484d0:	ba 00 00 00 00       	mov    $0x0,%edx
 80484d5:	85 d2                	test   %edx,%edx
 80484d7:	74 f2                	je     80484cb <frame_dummy+0xb>
 80484d9:	55                   	push   %ebp
 80484da:	89 e5                	mov    %esp,%ebp
 80484dc:	83 ec 14             	sub    $0x14,%esp
 80484df:	50                   	push   %eax
 80484e0:	ff d2                	call   *%edx
 80484e2:	83 c4 10             	add    $0x10,%esp
 80484e5:	c9                   	leave  
 80484e6:	e9 75 ff ff ff       	jmp    8048460 <register_tm_clones>

080484eb <main>:
 80484eb:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 80484ef:	83 e4 f0             	and    $0xfffffff0,%esp
 80484f2:	ff 71 fc             	pushl  -0x4(%ecx)
 80484f5:	55                   	push   %ebp
 80484f6:	89 e5                	mov    %esp,%ebp
 80484f8:	53                   	push   %ebx
 80484f9:	51                   	push   %ecx
 80484fa:	83 ec 20             	sub    $0x20,%esp
 80484fd:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048503:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8048506:	31 c0                	xor    %eax,%eax
 8048508:	83 ec 0c             	sub    $0xc,%esp
 804850b:	68 70 86 04 08       	push   $0x8048670
 8048510:	e8 9b fe ff ff       	call   80483b0 <puts@plt>
 8048515:	83 c4 10             	add    $0x10,%esp
 8048518:	83 ec 0c             	sub    $0xc,%esp
 804851b:	8d 45 ec             	lea    -0x14(%ebp),%eax
 804851e:	50                   	push   %eax
 804851f:	8d 45 e8             	lea    -0x18(%ebp),%eax
 8048522:	50                   	push   %eax
 8048523:	8d 45 e4             	lea    -0x1c(%ebp),%eax
 8048526:	50                   	push   %eax
 8048527:	8d 45 e0             	lea    -0x20(%ebp),%eax
 804852a:	50                   	push   %eax
 804852b:	68 96 86 04 08       	push   $0x8048696
 8048530:	e8 9b fe ff ff       	call   80483d0 <__isoc99_scanf@plt>
 8048535:	83 c4 20             	add    $0x20,%esp
 8048538:	8b 5d ec             	mov    -0x14(%ebp),%ebx
 804853b:	8b 4d e8             	mov    -0x18(%ebp),%ecx
 804853e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 8048541:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8048544:	53                   	push   %ebx
 8048545:	51                   	push   %ecx
 8048546:	52                   	push   %edx
 8048547:	50                   	push   %eax
 8048548:	e8 75 00 00 00       	call   80485c2 <VolumeAndDensity>
 804854d:	83 c4 10             	add    $0x10,%esp
 8048550:	89 45 f0             	mov    %eax,-0x10(%ebp)
 8048553:	8b 5d ec             	mov    -0x14(%ebp),%ebx
 8048556:	8b 4d e8             	mov    -0x18(%ebp),%ecx
 8048559:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 804855c:	8b 45 e0             	mov    -0x20(%ebp),%eax
 804855f:	83 ec 0c             	sub    $0xc,%esp
 8048562:	53                   	push   %ebx
 8048563:	51                   	push   %ecx
 8048564:	52                   	push   %edx
 8048565:	50                   	push   %eax
 8048566:	68 a4 86 04 08       	push   $0x80486a4
 804856b:	e8 20 fe ff ff       	call   8048390 <printf@plt>
 8048570:	83 c4 20             	add    $0x20,%esp
 8048573:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8048576:	8b 00                	mov    (%eax),%eax
 8048578:	83 ec 08             	sub    $0x8,%esp
 804857b:	50                   	push   %eax
 804857c:	68 cf 86 04 08       	push   $0x80486cf
 8048581:	e8 0a fe ff ff       	call   8048390 <printf@plt>
 8048586:	83 c4 10             	add    $0x10,%esp
 8048589:	8b 45 f0             	mov    -0x10(%ebp),%eax
 804858c:	83 c0 04             	add    $0x4,%eax
 804858f:	8b 00                	mov    (%eax),%eax
 8048591:	83 ec 08             	sub    $0x8,%esp
 8048594:	50                   	push   %eax
 8048595:	68 dd 86 04 08       	push   $0x80486dd
 804859a:	e8 f1 fd ff ff       	call   8048390 <printf@plt>
 804859f:	83 c4 10             	add    $0x10,%esp
 80485a2:	b8 00 00 00 00       	mov    $0x0,%eax
 80485a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
 80485aa:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 80485b1:	74 05                	je     80485b8 <main+0xcd>
 80485b3:	e8 e8 fd ff ff       	call   80483a0 <__stack_chk_fail@plt>
 80485b8:	8d 65 f8             	lea    -0x8(%ebp),%esp
 80485bb:	59                   	pop    %ecx
 80485bc:	5b                   	pop    %ebx
 80485bd:	5d                   	pop    %ebp
 80485be:	8d 61 fc             	lea    -0x4(%ecx),%esp
 80485c1:	c3                   	ret    

080485c2 <VolumeAndDensity>:
 80485c2:	55                   	push   %ebp
 80485c3:	89 e5                	mov    %esp,%ebp
 80485c5:	51                   	push   %ecx
 80485c6:	8b 45 08             	mov    0x8(%ebp),%eax
 80485c9:	0f af 45 0c          	imul   0xc(%ebp),%eax
 80485cd:	0f af 45 10          	imul   0x10(%ebp),%eax
 80485d1:	89 c1                	mov    %eax,%ecx
 80485d3:	31 d2                	xor    %edx,%edx
 80485d5:	8b 45 14             	mov    0x14(%ebp),%eax
 80485d8:	f7 f9                	idiv   %ecx
 80485da:	a3 30 a0 04 08       	mov    %eax,0x804a030
 80485df:	89 0d 2c a0 04 08    	mov    %ecx,0x804a02c
 80485e5:	8d 05 2c a0 04 08    	lea    0x804a02c,%eax
 80485eb:	59                   	pop    %ecx
 80485ec:	89 ec                	mov    %ebp,%esp
 80485ee:	5d                   	pop    %ebp
 80485ef:	c3                   	ret    

080485f0 <__libc_csu_init>:
 80485f0:	55                   	push   %ebp
 80485f1:	57                   	push   %edi
 80485f2:	56                   	push   %esi
 80485f3:	53                   	push   %ebx
 80485f4:	e8 27 fe ff ff       	call   8048420 <__x86.get_pc_thunk.bx>
 80485f9:	81 c3 07 1a 00 00    	add    $0x1a07,%ebx
 80485ff:	83 ec 0c             	sub    $0xc,%esp
 8048602:	8b 6c 24 20          	mov    0x20(%esp),%ebp
 8048606:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 804860c:	e8 43 fd ff ff       	call   8048354 <_init>
 8048611:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 8048617:	29 c6                	sub    %eax,%esi
 8048619:	c1 fe 02             	sar    $0x2,%esi
 804861c:	85 f6                	test   %esi,%esi
 804861e:	74 25                	je     8048645 <__libc_csu_init+0x55>
 8048620:	31 ff                	xor    %edi,%edi
 8048622:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048628:	83 ec 04             	sub    $0x4,%esp
 804862b:	ff 74 24 2c          	pushl  0x2c(%esp)
 804862f:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048633:	55                   	push   %ebp
 8048634:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 804863b:	83 c7 01             	add    $0x1,%edi
 804863e:	83 c4 10             	add    $0x10,%esp
 8048641:	39 f7                	cmp    %esi,%edi
 8048643:	75 e3                	jne    8048628 <__libc_csu_init+0x38>
 8048645:	83 c4 0c             	add    $0xc,%esp
 8048648:	5b                   	pop    %ebx
 8048649:	5e                   	pop    %esi
 804864a:	5f                   	pop    %edi
 804864b:	5d                   	pop    %ebp
 804864c:	c3                   	ret    
 804864d:	8d 76 00             	lea    0x0(%esi),%esi

08048650 <__libc_csu_fini>:
 8048650:	f3 c3                	repz ret 

Disassembly of section .fini:

08048654 <_fini>:
 8048654:	53                   	push   %ebx
 8048655:	83 ec 08             	sub    $0x8,%esp
 8048658:	e8 c3 fd ff ff       	call   8048420 <__x86.get_pc_thunk.bx>
 804865d:	81 c3 a3 19 00 00    	add    $0x19a3,%ebx
 8048663:	83 c4 08             	add    $0x8,%esp
 8048666:	5b                   	pop    %ebx
 8048667:	c3                   	ret    
